react-router

1. npm i react-router
2. Browser router - navigate from home to about page
    steps:
    1.wrap root component in index.js
    2.create component to be render (home and about)
    3.Routes can have multiple Route component
        Route accept path which rendered when path matched and render element
3. Using Link tag (navbar.js)
4. Using NavLink tag (navbar.js)  
    NavLink shows when some is active or not just by adding className at the time of running code SO STYLE IT USING ACTIVE className 
4. Rouer on button click (ordersummary)
    useNavigate() : used  to move from one page to other by actionListener

5. if user entered wrong route instead of only loading do some measure to tell user that it is wrong route USE PATH="*"

6. nested routing like "http://localhost:3000/products/new" or ""http://localhost:3000/products/feature" here product and new/feature are nested  to each other
    check product.js
    1. created product in app.js
    2. link of product in navbar.js
    3. added nested route in app.js
    4. link of new/feature in product.sj
    5. used OUTLET at last in product to render the desired component in link

7.  INDEX ROUTE - render this by-default (at the parent url) when product is loaded
    <Route index element={<FeatureProducts />} />

8. Dynamic Route
    :anyThing but if any named route is present then this will be rendered

9. useParams() to get the enteredId in the child components

10. searchParams as "user?filter=active"

11. relative link is started with "/"

12. Lazy Loading : 
    Lazy loading is a strategy to identify resources as non-blocking (non-critical) and load these only when needed. It's a way to shorten the length of the critical rendering path, which translates into reduced page load times.
    -> DONE ON ABOUT.js
    -> NORMALLY PAGES ARE LOADED BY DEFAULT EVEN NOT CALLED LIKE AS ABOUT PAGE
    -> used more when data-visualisation chart developmet

13. Router authentication example in e-commerce site we could have products is public but profile could only be accessible if user is logged in 
    1. added profile in nav and app.js (protected)
    2. setup a way to know wheather user logged in or not by providing entire context tree (login(used auth funtion to login) and logout function(navigate to redirect))
    3. now conver whole app.js in authprovider
    4. now create login/out functionality